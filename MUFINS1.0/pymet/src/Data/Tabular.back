import Model
__author__="Albert Gevorgyan"
__date__ ="$02-Mar-2010 14:57:37$"

import Model.Element
import Util

COMMENT = Util.COMMENT
TAB = '\t'
ENDOFRECORD = '///'


def save(table, path):
    if path != None:
        s = str(table)
        f = open(path, 'w')
        f.write(s)
        f.close()

def load(model, path):
    notextended = False
    s = open(path).read().strip()
    levels = s.split(ENDOFRECORD)
    if len(levels) == 1:
        lines = levels[0].split('\n')
        readModelLines(lines, model, Model.Element.Reaction)
        notextended = True
        model.setName(path)
    else:
        model.setName(levels[0].strip())
        for level in levels[1:]:
            if len(level) > 0 and not level.isspace():
                loadLevel(model, level)
    return notextended
 
def loadLevel(model, level):
    lines = level.strip().split('\n')
    name = lines[0].strip()
    name = name.split(' ')[-1]
    name = name[0].upper() + name[1:-1]
    theclass = Model.Element.__getattribute__(name)
    readModelLines(lines[1:], model, theclass)

def readModelLines(lines, model, theclass):
    i = 0
    for line in lines:
        i += 1
        if len(line) > 0 and not line.isspace() and not line.startswith(Util.COMMENT):
            try:
                readModelLine(line, model, theclass)
            except:
                raise SyntaxError("Error in line %d: %s" % (i, line))


def readModelLine(line, model, theclass):
    line, comment = splitLineAndComment(line)
    if len(line) > 0 and not line.isspace():
        r = theclass()
        toks = line.split(TAB)
        ID = toks[0]
        model.setdefault(ID, r)
        fields = r.getOrder()
        for i in range(1, len(toks)):
            if len(toks[i]) > 0:
#                if fields[i] != Model.Element.USEDBY:
                model.editElement(ID, fields[i], tok)
        model.editElement(ID, fields[-1], COMMENT + comment)







def splitLineAndComment(line):
    comment = ''
    if COMMENT in line:
        toks = line.rsplit(COMMENT, 1)
        line, comment = toks[0], toks[1]
    return line, comment


#
#


#def loadModel(model, path):
#    if path != None:
#        f = open(path)
#        i = 0
#        for line in f:
#            i += 1
#            try:
#                readModelLine(line, model)
#            except:
#                raise Exception("Parsing error in line %d: %s" % (i, line))
#        f.close()
#
#def readModelLine(line, model):
#    line, comment = splitLineAndComment(line)
#    if not line.isspace():
#        r = Model.Element.Reaction()
#        toks = line.split(TAB)
#        ID = toks[0]
#        model[ID] = r
#        fields = r.getOrder()
#        for i in range(1, len(toks)):
#            if len(toks[i]) > 0:
#                tok = toks[i].strip('"')
#                model.editElement(ID, fields[i], tok)
#        model.editElement(ID, fields[-1], COMMENT + comment)



#def loadExtendedModel(model, lines):
#        levels = s.split(ENDOFRECORD)
#        for level in levels:
#            if len(level) > 0 and not level.isspace():
#                loadLevel(model, level)
#
#
#def loadModel(model, lines):
#    print "loading model"
#    if path != None:
#        f = open(path)
#        lines = f.readlines()
#        f.close()
#        readModelLines(lines, model, Model.Element.Reaction)